"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function Sprite(e) {
  e.width, e.height, e.frames, e.duration, e.context;
}function getAngle(e, t) {
  return 180 * Math.atan2(t.y - e.y, t.x - e.x) / Math.PI;
}function mod(e, t) {
  return e >= 0 ? e % t : t + e % t;
}function lineDistance(e, t) {
  var i = 0,
      n = 0;return i = t.x - e.x, i *= i, n = t.y - e.y, n *= n, Math.sqrt(i + n);
}function pointFromAngle(e, t, i) {
  var n = t * (Math.PI / 180),
      s = Math.cos(n) * i,
      o = Math.sin(n) * i;return s = e.x + s, o = e.y + o, { x: s, y: o };
}function getRandomArbitary(e, t) {
  return Math.random() * (t - e) + e;
}function getRandomInt(e, t) {
  return Math.floor(Math.random() * (t - e + 1)) + e;
}function chance(e) {
  return 100 * Math.random() < e;
}function isFacing(e, t) {
  var i = !1,
      n = getAngle(e.center, t.center) - e.angle;return Math.abs(n) < 100 && (i = n), i;
}function isIntersecting1(e, t, i, n) {
  var s = (t.x - e.x) * (n.y - i.y) - (t.y - e.y) * (n.x - i.x),
      o = (e.y - i.y) * (n.x - i.x) - (e.x - i.x) * (n.y - i.y),
      a = (e.y - i.y) * (t.x - e.x) - (e.x - i.x) * (t.y - e.y);if (0 == s) return 0 == o && 0 == a;var h = o / s,
      r = a / s;return h >= 0 && 1 >= h && r >= 0 && 1 >= r;
}function line_intersects(e, t, i, n, s, o, a, h) {
  var r, c, l, d;r = i - e, c = n - t, l = a - s, d = h - o;var u, g;return u = (-c * (e - s) + r * (t - o)) / (-l * c + r * d), g = (l * (t - o) - d * (e - s)) / (-l * c + r * d), u >= 0 && 1 >= u && g >= 0 && 1 >= g ? 1 : 0;
}function CCW(e, t, i) {
  return (i.y - e.y) * (t.x - e.x) > (t.y - e.y) * (i.x - e.x);
}function isIntersecting(e, t, i, n) {
  return CCW(e, i, n) != CCW(t, i, n) && CCW(e, t, i) != CCW(e, t, n);
}function lineIntersectsShip(e, t, i) {
  var n = { x: i.x, y: i.y },
      s = { x: i.x + i.width, y: i.y },
      o = { x: i.x + i.width, y: i.y + i.height },
      a = { x: i.x, y: i.y + i.height };return isIntersecting(e, t, n, s) || isIntersecting(e, t, s, o) || isIntersecting(e, t, o, a) || isIntersecting(e, t, a, n);
}function explode(e, t, i) {
  var n,
      s,
      o = document.createElement("div");o.className = "explosion explosion" + getRandomInt(1, 5), $(document.body).append(o), n = o.offsetWidth, s = o.offsetHeight, o.style.top = t - s / 2 + "px", o.style.left = e - n / 2 + "px", i && (o.style.transform = "scale(" + i + ")"), o.x = e, o.y = t, o.width = n / 2, o.height = s / 2, explosions.push(o), explosionSound.play();
}function Projectile(e) {
  var t = this;this.owner = e.owner, this.target = e.target, this.type = e.type, this.health = e.health || 1, this.damage = e.damage || 10, this.ctx = e.ctx, this.speedX = e.speedX || 0, this.speedY = e.speedY || 0, this.acceleration = e.acceleration || .3, this.turnSpeed = e.turnSpeed || 0, this.angle = e.angle, this.width = e.width || 6, this.height = e.height || 12, this.x = e.x - this.width / 2, this.y = e.y - this.height / 2, this.center = { x: this.x + this.width / 2, y: this.y + this.height / 2 }, this.image = new Image(), this.image.src = "images/objects/bolt1.png", this.image.onload = function () {
    t.width = t.image.width, t.height = t.image.height, t.x = e.x - t.width / 2, t.y = e.y - t.height / 2, t.center = { x: t.x + t.width / 2, y: t.y + t.height / 2 };
  };
}function render() {
  if (game) {
    requestAnimationFrame(render), canvas.ctx.clearRect(0, 0, canvas.width, canvas.height), canvas.ctx.drawImage(canvas.bg, 0, 0);for (var e = 0; e < explosions.length; e++) {
      for (var t = 0; t < enemies.length; t++) {
        isColliding(explosions[e], enemies[t]) && enemies[t].health--;
      }isColliding(explosions[e], Firefly) && Firefly.health--;
    }explosions = [];for (var i = 0; i < projectiles.length; i++) {
      for (var t = 0; t < enemies.length; t++) {
        projectiles[i].owner === Firefly && isColliding(projectiles[i], enemies[t]) && (enemies[t].health -= projectiles[i].damage, projectiles[i].health = 0);
      }projectiles[i].owner !== Firefly && isColliding(projectiles[i], Firefly) && (Firefly.health -= projectiles[i].damage, projectiles[i].health = 0);
    }Firefly.update();for (var n = 0; n < projectiles.length; n++) {
      projectiles[n].update();
    }for (var n = 0; n < enemies.length; n++) {
      enemies[n].update();
    }ui.showHealth(canvas.ctx, Firefly);
  }
}function isColliding(e, t) {
  return !(e === t || e.x + e.width < t.x - t.width || e.y + e.height < t.y - t.height || e.x - e.width > t.x + t.width || e.y - e.height > t.y + t.height);
}function Ship(e, t) {
  var i = this;this.health = 50, this.ctx = e.ctx, this.status = {}, this.lastStatusChange = 1 / 0, this.speedX = 0, this.speedY = 0, this.acceleration = .3, this.turnSpeed = 3, this.cooldownTime = 20, this.inaccuracy = 100, this.cooldown = 0, this.x = window.innerWidth / 2 - 40, this.y = window.innerHeight / 2 - 40, this.angle = 0, this.width = 50, this.height = 50, this.fireImg = new Image(), this.fireImg.src = "images/objects/GunFlare.png", this.takingFireImg = new Image(), this.takingFireImg.src = "images/objects/BulletImpact.png", Object.extend(this, t), this.maxHealth = this.health, this.center = { x: this.x + this.width / 2, y: this.y + this.height / 2 }, this.image = new Image(), this.image.src = this.imageSrc, this.image.onload = function () {
    i.width = i.image.width, i.height = i.image.height, i.center = { x: i.x + i.width / 2, y: i.y + i.height / 2 };
  };
}function createPlayer(e) {
  var t = new Ship(e, { acceleration: .8, turnSpeed: 6, health: 500, cooldownTime: 5, imageSrc: "images/objects/Firefly.png", update: function update() {
      if (this.health <= 0) return this.destroy();this.status = {}, this.turn(mousePosition);var e = { forward: keyDown[KEYS.UP_ARROW] || keyDown[KEYS.KEY_W], back: keyDown[KEYS.DOWN_ARROW] || keyDown[KEYS.KEY_S], left: keyDown[KEYS.LEFT_ARROW] || keyDown[KEYS.KEY_A], right: keyDown[KEYS.RIGHT_ARROW] || keyDown[KEYS.KEY_D] };if (this.move(e), this.cooldown < 1) {
        if (keyDown[KEYS.SPACE]) {
          var t = this.width / 2.4,
              i = pointFromAngle(this.center, this.angle - 90, t),
              n = pointFromAngle(this.center, this.angle - 90, -t),
              s = pointFromAngle(mousePosition, this.angle - 90, .5 * t),
              o = pointFromAngle(mousePosition, this.angle - 90, .5 * -t);this.fireMissile(i, s), this.fireMissile(n, o), this.cooldown = this.cooldownTime, laserSound.play();
        }mouseDown[BUTTONS.LEFT] && this.fireGun();
      } else this.cooldown--;this.draw();
    }, destroy: function destroy() {
      explode(this.center.x, this.center.y, 5), alert("Game over!");
    } });return t;
}function createEnemy(e) {
  var t = new Ship(e, { speed: 5, x: chance(50) ? getRandomInt(50, 300) : getRandomInt(e.width - 250, e.width - 400), y: chance(50) ? getRandomInt(50, 300) : getRandomInt(e.height - 250, e.height - 400), imageSrc: "images/objects/enemy1.png", update: function update() {
      if (this.health <= 0) return this.destroy();this.lastStatusChange > 1 ? (this.status = {}, this.lastStatusChange = 0) : this.lastStatusChange++, this.turn(Firefly.center);var e = isFacing(Firefly, this),
          t = {};if (e ? t = { forward: !0, left: e > 0, right: 0 > e } : lineDistance(this.center, Firefly.center) < 300 && (t = { back: !0 }), this.move(t), this.cooldown < 1) {
        if (chance(1)) {
          var i = { x: Firefly.center.x + getRandomInt(-this.inaccuracy, this.inaccuracy), y: Firefly.center.y + getRandomInt(-this.inaccuracy, this.inaccuracy) };this.fireMissile(this.center, i), this.cooldown = this.cooldownTime, this.status.firing = !0, laserSound.play();
        }
      } else this.status.firing = !1, this.cooldown--;this.draw();
    }, destroy: function destroy() {
      explode(this.center.x, this.center.y, 2.5), enemies = enemies.filter(function (e) {
        return e !== this;
      }, this), enemies.length || alert("Win!");
    } });return t;
}function SoundPool(e, t, i) {
  var n = [];this.pool = n;for (var s = 0, o = this, a = 0; i > a; a++) {
    var h = new Audio(e);h.volume = t, n[a] = h;
  }this.setVolume = function (e) {
    for (var t = 0; t < o.pool.length; t++) {
      o.pool[t].volume = e;
    }
  }, this.mute = function (e) {
    for (var t = 0; t < o.pool.length; t++) {
      "undefined" == typeof e ? o.pool[t].muted = !o.pool[t].muted : o.pool[t].muted = e;
    }
  }, this.play = function () {
    (0 == n[s].currentTime || n[s].ended) && n[s].play(), s = (s + 1) % i;
  };
}function Playlist(e, t, i) {
  var n = this,
      s = i ? getRandomInt(0, e.length - 1) : 0,
      o = new Audio();o.volume = t || .5, o.src = e[s], this.setVolume = function (e) {
    o.volume = e;
  }, this.mute = function (e) {
    "undefined" == typeof e ? o.muted = !o.muted : o.muted = e;
  }, this.play = function () {
    o.play();
  }, this.pause = function () {
    o.pause();
  }, this.next = function () {
    s = i ? getRandomInt(0, e.length - 1) : (s + 1) % e.length, o.src = e[s], o.play();
  }, this.isPlaying = function () {
    return !o.paused;
  }, o.addEventListener("ended", n.next);
}function newGame() {
  window.location.reload();
}function continueGame() {
  game = !0, render(), $(".menu").hide();
}function pauseGame() {
  game = !1, $(".menu").show();
}function checkMouseButtons() {
  if (mouseDownCount) for (var e = 0; e < mouseDown.length; ++e) {
    mouseDown[e] && console.log("Button: " + e);
  }
}function disableKeys(e) {
  document.addEventListener("keydown", function (t) {
    e.indexOf(t.which) > -1 && t.preventDefault();
  });
}function warn(e, t) {}Sprite.prototype = { draw: function draw(e) {} }, document.addEventListener("transitionend", function (e) {
  var t = $(e.target);t.hasClass("missile") && "top" === e.propertyName && (explode(t.offset().left - t.width() / 2, t.offset().top - t.height() / 2), t.remove());
}), document.addEventListener("animationend", function (e) {
  var t = $(e.target);t.hasClass("explosion") && t.remove();
}), Projectile.prototype = { draw: function draw() {
    this.drawRotated();
  }, drawRotated: function drawRotated(e) {
    e || (e = this.image);var t = this.center.x,
        i = this.center.y,
        n = this.ctx,
        s = this.angle + 90,
        o = s * Math.PI / 180;n.translate(t, i), n.rotate(o), n.drawImage(e, -this.width / 2, -this.height / 2), n.rotate(-o), n.translate(-t, -i);
  }, updateCenter: function updateCenter() {
    this.center.x = this.x + this.width / 2, this.center.y = this.y + this.height / 2;
  }, turn: function turn(e) {
    var t = getAngle(this.center, e),
        i = mod(t - this.angle + 180, 360) - 180;i > -4 && 4 > i ? this.angle = t : 0 > i ? this.angle -= this.turnSpeed : this.angle += this.turnSpeed;
  }, move: function move(e) {
    var t = this.angle * (Math.PI / 180),
        i = e.forward ? 1 : 0,
        n = e.back ? -.3 : 0,
        s = e.left ? .4 : 0,
        o = e.right ? -.4 : 0;this.speedX = this.speedX + (i + n) * this.acceleration * Math.cos(t), this.speedY = this.speedY + (i + n) * this.acceleration * Math.sin(t), this.speedX = this.speedX + (s + o) * this.acceleration * Math.cos(t - Math.PI / 2), this.speedY = this.speedY + (s + o) * this.acceleration * Math.sin(t - Math.PI / 2), this.speedX *= .985, this.speedY *= .985, this.x = this.x + this.speedX, this.y = this.y + this.speedY, this.updateCenter();
  }, update: function update() {
    if (this.health <= 0) return this.destroy();if (this.x < 0 || this.y < 0 || this.x > this.ctx.canvas.width || this.y > this.ctx.canvas.height) return this.remove();var e = { forward: !0 };this.move(e), this.draw();
  }, destroy: function destroy() {
    explode(this.center.x, this.center.y), projectiles = projectiles.filter(function (e) {
      return e !== this;
    }, this);
  }, remove: function remove() {
    projectiles = projectiles.filter(function (e) {
      return e !== this;
    }, this);
  } };var Firefly,
    enemies = new Array(8),
    projectiles = [],
    explosions = [],
    game = !0,
    laserSound = new SoundPool("sound/effects/laser.wav", .05, 300),
    explosionSound = new SoundPool("sound/effects/explosion4.wav", .1, 300),
    playlist = ["sound/music/ambientmain_0.ogg", "sound/music/dark_fallout.ogg", "sound/music/last_stand_in_space.ogg", "sound/music/dust.mp3"],
    backgroundAudio = new Playlist(playlist, .2, !0),
    canvas;document.addEventListener("DOMContentLoaded", function () {
  canvas = document.getElementById("canvas"), canvas.ctx = canvas.getContext("2d"), canvas.width = window.innerWidth, canvas.height = window.innerHeight, window.onresize = function () {
    canvas.width = window.innerWidth, canvas.height = window.innerHeight;
  }, canvas.bg = new Image(), canvas.bg.src = "images/bg.jpg", Firefly = createPlayer(canvas);for (var e = 0; e < enemies.length; e++) {
    enemies[e] = createEnemy(canvas);
  }window.setTimeout(render, 50);
}), Ship.prototype = { draw: function draw() {
    this.drawRotated(), this.status.firing && this.drawRotated(this.fireImg), this.status.takingFire && this.drawRotated(this.takingFireImg);
  }, drawRotated: function drawRotated(e) {
    e || (e = this.image);var t = this.center.x,
        i = this.center.y,
        n = this.ctx,
        s = this.angle + 90,
        o = s * Math.PI / 180;n.translate(t, i), n.rotate(o), n.drawImage(e, -this.width / 2, -this.height / 2), n.rotate(-o), n.translate(-t, -i);
  }, updateCenter: function updateCenter() {
    this.center.x = this.x + this.width / 2, this.center.y = this.y + this.height / 2;
  }, turn: function turn(e) {
    var t = getAngle(this.center, e),
        i = mod(t - this.angle + 180, 360) - 180;i > -4 && 4 > i ? this.angle = t : 0 > i ? this.angle -= this.turnSpeed : this.angle += this.turnSpeed;
  }, fireGun: function fireGun() {
    if (!(this.cooldown > 0)) {
      this.status.firing = !0;for (var e = pointFromAngle(this.center, this.angle, 1e4), t = [], i = 0; i < enemies.length; i++) {
        lineIntersectsShip(this.center, e, enemies[i]) && t.push(enemies[i]);
      }for (var n, s, o = 1 / 0, i = 0; i < t.length; i++) {
        s = lineDistance(this.center, t[i].center), o > s && (o = s, n = t[i]);
      }n && (n.status.takingFire = !0, n.lastStatusChange = 0, n.health--, e = pointFromAngle(this.center, this.angle, o));var a = 12,
          h = pointFromAngle(this.center, this.angle - 90, a),
          r = pointFromAngle(this.center, this.angle - 90, -a),
          c = pointFromAngle(e, this.angle - 90, a),
          l = pointFromAngle(e, this.angle - 90, -a),
          d = this.ctx;d.beginPath(), d.moveTo(h.x, h.y), d.lineTo(c.x, c.y), d.moveTo(r.x, r.y), d.lineTo(l.x, l.y), d.lineWidth = .8, d.strokeStyle = "orange", d.stroke(), this.cooldown = this.cooldownTime, laserSound.play();
    }
  }, fireMissile: function fireMissile(e, t) {
    var i = { owner: this, x: e.x, y: e.y, type: "dumbfire", ctx: this.ctx, angle: this.angle, speedX: this.speedX, speedY: this.speedY };projectiles.push(new Projectile(i));
  }, move: function move(e) {
    var t = this.angle * (Math.PI / 180),
        i = e.forward ? 1 : 0,
        n = e.back ? -.3 : 0,
        s = e.left ? .4 : 0,
        o = e.right ? -.4 : 0;this.speedX = this.speedX + (i + n) * this.acceleration * Math.cos(t), this.speedY = this.speedY + (i + n) * this.acceleration * Math.sin(t), this.speedX = this.speedX + (s + o) * this.acceleration * Math.cos(t - Math.PI / 2), this.speedY = this.speedY + (s + o) * this.acceleration * Math.sin(t - Math.PI / 2), this.speedX *= .985, this.speedY *= .985, this.x = this.x + this.speedX, this.y = this.y + this.speedY, this.updateCenter();
  } };var deleteMeAudio = { togglePlayers: function togglePlayers(e) {
    var t;t = e ? [e] : [musicPlayer, speechPlayer, effectsPlayer];for (var i = 0; i < t.length; i++) {
      t[i].muted = !t[i].muted, settings[t[i].id] = settings[t[i].id] || {}, settings[t[i].id].muted = t[i].muted;
    }
  }, volumeDown: function volumeDown(e) {
    var t;t = e ? [e] : [musicPlayer, speechPlayer, effectsPlayer];for (var i = 0; i < t.length; i++) {
      t[i].volume > 0 && (t[i].volume = Math.round(10 * (t[i].volume - .1)) / 10), alert("Volume: " + 10 * t[i].volume), settings[t[i].id] = settings[t[i].id] || {}, settings[t[i].id].volume = t[i].volume, console.log(settings[t[i].id] + " " + t[i].id + " " + t[i].volume + " " + settings[t[i].id].volume);
    }
  }, volumeUp: function volumeUp(e) {
    var t;t = e ? [e] : [musicPlayer, speechPlayer, effectsPlayer];for (var i = 0; i < t.length; i++) {
      t[i].volume < 1 && (t[i].volume = Math.round(10 * (t[i].volume + .1)) / 10), alert("Volume: " + 10 * t[i].volume), settings[t[i].id] = settings[t[i].id] || {}, settings[t[i].id].volume = t[i].volume, console.log(settings[t[i].id] + " " + t[i].id + " " + t[i].volume + " " + settings[t[i].id].volume);
    }
  }, setVolume: function setVolume(e, t) {
    var i;i = t ? [t] : [musicPlayer, speechPlayer, effectsPlayer];for (var n = 0; n < i.length; n++) {
      i[n].volume = e, alert("Volume set: " + 10 * i[n].volume);
    }
  }, nextTrack: function nextTrack() {
    var e = musicPlayer;e.paused ? e.play() : e.pause();
  } },
    ui = { showHealth: function showHealth(e, t) {
    var i = e.canvas.width * t.health / t.maxHealth;e.fillStyle = "black", e.fillRect(0, 0, e.canvas.width, 4), e.fillStyle = "red", e.fillRect(0, 1, i, 2);
  } };document.addEventListener("keyup", function (e) {
  var t = Object.keys(KEYS).filter(function (t) {
    return KEYS[t] === e.which;
  })[0];switch (t) {case "ESCAPE":case "PAUSE":
      game ? pauseGame() : continueGame();}
});var KEYS = { BACKSPACE: 8, TAB: 9, ENTER: 13, SHIFT: 16, CTRL: 17, ALT: 18, PAUSE: 19, CAPS_LOCK: 20, ESCAPE: 27, SPACE: 32, PAGE_UP: 33, PAGE_DOWN: 34, END: 35, HOME: 36, LEFT_ARROW: 37, UP_ARROW: 38, RIGHT_ARROW: 39, DOWN_ARROW: 40, INSERT: 45, DELETE: 46, KEY_0: 48, KEY_1: 49, KEY_2: 50, KEY_3: 51, KEY_4: 52, KEY_5: 53, KEY_6: 54, KEY_7: 55, KEY_8: 56, KEY_9: 57, KEY_A: 65, KEY_B: 66, KEY_C: 67, KEY_D: 68, KEY_E: 69, KEY_F: 70, KEY_G: 71, KEY_H: 72, KEY_I: 73, KEY_J: 74, KEY_K: 75, KEY_L: 76, KEY_M: 77, KEY_N: 78, KEY_O: 79, KEY_P: 80, KEY_Q: 81, KEY_R: 82, KEY_S: 83, KEY_T: 84, KEY_U: 85, KEY_V: 86, KEY_W: 87, KEY_X: 88, KEY_Y: 89, KEY_Z: 90, LEFT_META: 91, RIGHT_META: 92, SELECT: 93, NUMPAD_0: 96, NUMPAD_1: 97, NUMPAD_2: 98, NUMPAD_3: 99, NUMPAD_4: 100, NUMPAD_5: 101, NUMPAD_6: 102, NUMPAD_7: 103, NUMPAD_8: 104, NUMPAD_9: 105, MULTIPLY: 106, ADD: 107, SUBTRACT: 109, DECIMAL: 110, DIVIDE: 111, F1: 112, F2: 113, F3: 114, F4: 115, F5: 116, F6: 117, F7: 118, F8: 119, F9: 120, F10: 121, F11: 122, F12: 123, NUM_LOCK: 144, SCROLL_LOCK: 145, SEMICOLON: 186, EQUALS: 187, COMMA: 188, DASH: 189, PERIOD: 190, FORWARD_SLASH: 191, GRAVE_ACCENT: 192, OPEN_BRACKET: 219, BACK_SLASH: 220, CLOSE_BRACKET: 221, SINGLE_QUOTE: 222 },
    keyDown = [],
    mousePosition = { x: 0, y: 0 },
    BUTTONS = { LEFT: 0, MIDDLE: 1, RIGHT: 2 },
    mouseDown = [],
    mouseDownCount = 0;document.addEventListener("keydown", function (e) {
  keyDown[e.which] = !0;
}), document.addEventListener("keyup", function (e) {
  keyDown[e.which] = !1;
}), document.addEventListener("mousemove", function (e) {
  mousePosition = { x: e.clientX, y: e.clientY };
}), document.addEventListener("mousedown", function (e) {
  mouseDown[e.button] = !0, ++mouseDownCount, checkMouseButtons();
}), document.addEventListener("mouseup", function (e) {
  mouseDown[e.button] = !1, --mouseDownCount;
}), document.addEventListener("contextmenu", function (e) {}), window.alert = function (e, t, i) {
  i = i || 1500;var n = $("<div/>", { "class": "alert popup", text: e }).appendTo("body");n.delay(i).fadeOut(300), setTimeout(function () {
    n.remove();
  }, i + 300);
}, window.onerror = function (e, t, i, n, s) {
  return console.log(e, i, n, s), alert(e, "error", 4e3);
}, "function" != typeof Object.extend && (Object.extend = function (e, t) {
  for (var i in t) {
    if (t.hasOwnProperty(i)) {
      var n = t[i];e.hasOwnProperty(i) && "object" == _typeof(e[i]) && "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) ? Object.extend(e[i], n) : e[i] = n;
    }
  }return e;
});
//# sourceMappingURL=main.min.js.map
